// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/asr.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ASRService_SpeechToText_FullMethodName = "/asr.ASRService/SpeechToText"
	ASRService_DetectVAD_FullMethodName    = "/asr.ASRService/DetectVAD"
)

// ASRServiceClient is the client API for ASRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ASR服务定义
type ASRServiceClient interface {
	// 语音转文本
	SpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (*SpeechToTextResponse, error)
	// 语音活动检测
	DetectVAD(ctx context.Context, in *DetectVADRequest, opts ...grpc.CallOption) (*DetectVADResponse, error)
}

type aSRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewASRServiceClient(cc grpc.ClientConnInterface) ASRServiceClient {
	return &aSRServiceClient{cc}
}

func (c *aSRServiceClient) SpeechToText(ctx context.Context, in *SpeechToTextRequest, opts ...grpc.CallOption) (*SpeechToTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpeechToTextResponse)
	err := c.cc.Invoke(ctx, ASRService_SpeechToText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aSRServiceClient) DetectVAD(ctx context.Context, in *DetectVADRequest, opts ...grpc.CallOption) (*DetectVADResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectVADResponse)
	err := c.cc.Invoke(ctx, ASRService_DetectVAD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ASRServiceServer is the server API for ASRService service.
// All implementations must embed UnimplementedASRServiceServer
// for forward compatibility.
//
// ASR服务定义
type ASRServiceServer interface {
	// 语音转文本
	SpeechToText(context.Context, *SpeechToTextRequest) (*SpeechToTextResponse, error)
	// 语音活动检测
	DetectVAD(context.Context, *DetectVADRequest) (*DetectVADResponse, error)
	mustEmbedUnimplementedASRServiceServer()
}

// UnimplementedASRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedASRServiceServer struct{}

func (UnimplementedASRServiceServer) SpeechToText(context.Context, *SpeechToTextRequest) (*SpeechToTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}
func (UnimplementedASRServiceServer) DetectVAD(context.Context, *DetectVADRequest) (*DetectVADResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectVAD not implemented")
}
func (UnimplementedASRServiceServer) mustEmbedUnimplementedASRServiceServer() {}
func (UnimplementedASRServiceServer) testEmbeddedByValue()                    {}

// UnsafeASRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ASRServiceServer will
// result in compilation errors.
type UnsafeASRServiceServer interface {
	mustEmbedUnimplementedASRServiceServer()
}

func RegisterASRServiceServer(s grpc.ServiceRegistrar, srv ASRServiceServer) {
	// If the following call pancis, it indicates UnimplementedASRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ASRService_ServiceDesc, srv)
}

func _ASRService_SpeechToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeechToTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRServiceServer).SpeechToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ASRService_SpeechToText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRServiceServer).SpeechToText(ctx, req.(*SpeechToTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ASRService_DetectVAD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectVADRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRServiceServer).DetectVAD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ASRService_DetectVAD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRServiceServer).DetectVAD(ctx, req.(*DetectVADRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ASRService_ServiceDesc is the grpc.ServiceDesc for ASRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ASRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asr.ASRService",
	HandlerType: (*ASRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpeechToText",
			Handler:    _ASRService_SpeechToText_Handler,
		},
		{
			MethodName: "DetectVAD",
			Handler:    _ASRService_DetectVAD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/asr.proto",
}
