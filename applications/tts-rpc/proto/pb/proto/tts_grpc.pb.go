// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: proto/tts.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TTSService_TextToSpeech_FullMethodName       = "/tts.TTSService/TextToSpeech"
	TTSService_TextToSpeechStream_FullMethodName = "/tts.TTSService/TextToSpeechStream"
	TTSService_VoicesList_FullMethodName         = "/tts.TTSService/VoicesList"
)

// TTSServiceClient is the client API for TTSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TTSServiceClient interface {
	// 文本转语音
	TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (*TextToSpeechResponse, error)
	TextToSpeechStream(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TTSService_TextToSpeechStreamClient, error)
	// 获取语音列表
	VoicesList(ctx context.Context, in *VoicesListRequest, opts ...grpc.CallOption) (*VoicesListResponse, error)
}

type tTSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTTSServiceClient(cc grpc.ClientConnInterface) TTSServiceClient {
	return &tTSServiceClient{cc}
}

func (c *tTSServiceClient) TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (*TextToSpeechResponse, error) {
	out := new(TextToSpeechResponse)
	err := c.cc.Invoke(ctx, TTSService_TextToSpeech_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tTSServiceClient) TextToSpeechStream(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TTSService_TextToSpeechStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TTSService_ServiceDesc.Streams[0], TTSService_TextToSpeechStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tTSServiceTextToSpeechStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TTSService_TextToSpeechStreamClient interface {
	Recv() (*TextToSpeechResponse, error)
	grpc.ClientStream
}

type tTSServiceTextToSpeechStreamClient struct {
	grpc.ClientStream
}

func (x *tTSServiceTextToSpeechStreamClient) Recv() (*TextToSpeechResponse, error) {
	m := new(TextToSpeechResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tTSServiceClient) VoicesList(ctx context.Context, in *VoicesListRequest, opts ...grpc.CallOption) (*VoicesListResponse, error) {
	out := new(VoicesListResponse)
	err := c.cc.Invoke(ctx, TTSService_VoicesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TTSServiceServer is the server API for TTSService service.
// All implementations must embed UnimplementedTTSServiceServer
// for forward compatibility
type TTSServiceServer interface {
	// 文本转语音
	TextToSpeech(context.Context, *TextToSpeechRequest) (*TextToSpeechResponse, error)
	TextToSpeechStream(*TextToSpeechRequest, TTSService_TextToSpeechStreamServer) error
	// 获取语音列表
	VoicesList(context.Context, *VoicesListRequest) (*VoicesListResponse, error)
	mustEmbedUnimplementedTTSServiceServer()
}

// UnimplementedTTSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTTSServiceServer struct {
}

func (UnimplementedTTSServiceServer) TextToSpeech(context.Context, *TextToSpeechRequest) (*TextToSpeechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}
func (UnimplementedTTSServiceServer) TextToSpeechStream(*TextToSpeechRequest, TTSService_TextToSpeechStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TextToSpeechStream not implemented")
}
func (UnimplementedTTSServiceServer) VoicesList(context.Context, *VoicesListRequest) (*VoicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoicesList not implemented")
}
func (UnimplementedTTSServiceServer) mustEmbedUnimplementedTTSServiceServer() {}

// UnsafeTTSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TTSServiceServer will
// result in compilation errors.
type UnsafeTTSServiceServer interface {
	mustEmbedUnimplementedTTSServiceServer()
}

func RegisterTTSServiceServer(s grpc.ServiceRegistrar, srv TTSServiceServer) {
	s.RegisterService(&TTSService_ServiceDesc, srv)
}

func _TTSService_TextToSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextToSpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTSServiceServer).TextToSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TTSService_TextToSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTSServiceServer).TextToSpeech(ctx, req.(*TextToSpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TTSService_TextToSpeechStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextToSpeechRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TTSServiceServer).TextToSpeechStream(m, &tTSServiceTextToSpeechStreamServer{stream})
}

type TTSService_TextToSpeechStreamServer interface {
	Send(*TextToSpeechResponse) error
	grpc.ServerStream
}

type tTSServiceTextToSpeechStreamServer struct {
	grpc.ServerStream
}

func (x *tTSServiceTextToSpeechStreamServer) Send(m *TextToSpeechResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TTSService_VoicesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTSServiceServer).VoicesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TTSService_VoicesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTSServiceServer).VoicesList(ctx, req.(*VoicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TTSService_ServiceDesc is the grpc.ServiceDesc for TTSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TTSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tts.TTSService",
	HandlerType: (*TTSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextToSpeech",
			Handler:    _TTSService_TextToSpeech_Handler,
		},
		{
			MethodName: "VoicesList",
			Handler:    _TTSService_VoicesList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TextToSpeechStream",
			Handler:       _TTSService_TextToSpeechStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tts.proto",
}
